{"version":3,"file":"static/js/544.df79ff7f.chunk.js","mappings":"uMAkCA,UA5Ba,WACX,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAejB,OAbAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MACGC,MAAK,SAAAC,GACJR,EAAUQ,GACVN,EAAS,KACV,IACAO,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZR,EAASQ,GACTV,EAAU,GACX,GACJ,GAAE,KAGD,6BACE,2CACCC,IAAS,uBAAIA,EAAMY,WAEb,OAANd,QAAM,IAANA,OAAA,EAAAA,EAAQe,QAAS,IAAK,SAAC,IAAD,CAAYf,OAAQA,EAAQI,SAAUA,MAGlE,C,oDCSD,IApCmB,SAAC,GAA0B,IAAxBJ,EAAuB,EAAvBA,OAAQI,EAAe,EAAfA,SAC5B,OACE,2BACE,mCACCJ,EAAOgB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,aAA3B,OACV,yBACE,UAAC,KAAD,CAAMC,GAAE,kBAAaJ,GAAMK,MAAO,CAAEC,KAAMnB,GAA1C,WACE,yBACGc,EADH,KAEGE,EAAe,IAAII,KAAKJ,GAAcK,cAAgB,UAEzD,gBACEC,IAAKC,EAAAA,GAAYR,EACjBS,IAAKV,EACLW,QAAQ,OACRC,MAAO,UAVJb,EADC,MAkBjB,C,uNCzBDc,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCACHL,EAAY,kCAGZpB,EAAc,mCAAG,uGACLwB,EAAAA,EAAAA,GAHH,sBAGwB,CAC1CE,OAAQ,CACNC,QAASF,KAHe,uBACpBG,EADoB,EACpBA,KADoB,kBAMrBA,EAAKC,SANgB,2CAAH,qDASdC,EAAQ,mCAAG,WAAMC,GAAN,sGACCP,EAAAA,EAAAA,GAAM,UAAD,OAAWO,GAAW,CAChDL,OAAQ,CACNC,QAASF,KAHS,uBACdG,EADc,EACdA,KAMNjB,EAMEiB,EANFjB,MACaqB,EAKXJ,EALFhB,YACcqB,EAIZL,EAJFf,aACAqB,EAGEN,EAHFM,OACAC,EAEEP,EAFFO,SACcC,EACZR,EADFS,aAZoB,kBAcf,CAAE1B,MAAAA,EAAOqB,WAAAA,EAAYC,YAAAA,EAAaC,OAAAA,EAAQC,SAAAA,EAAUC,YAAAA,IAdrC,2CAAH,sDAiBRE,EAAS,mCAAG,WAAMP,GAAN,0FACAP,EAAAA,EAAAA,GAAM,UAAD,OAAWO,EAAX,YAA8B,CACxDL,OAAQ,CACNC,QAASF,KAHU,uBACfG,EADe,EACfA,KADe,kBAOhBA,EAAKW,MAPW,2CAAH,sDAUTC,EAAY,mCAAG,WAAMT,GAAN,0FACHP,EAAAA,EAAAA,GAAM,UAAD,OAAWO,EAAX,YAA8B,CACxDL,OAAQ,CACNC,QAASF,KAHa,uBAClBG,EADkB,EAClBA,KADkB,kBAOnBA,EAAKC,SAPc,2CAAH,sDAUZY,EAAW,mCAAG,WAAMC,GAAN,yFACFlB,EAAAA,EAAAA,IAAA,gBAA2B,CAChDE,OAAQ,CACNC,QAASF,EACTiB,MAAAA,EACAC,KAAM,KALe,uBACjBf,EADiB,EACjBA,KADiB,kBASlBA,EAAKC,SATa,2CAAH,qD","sources":["pages/Home/Home.jsx","pages/MoviesList/MoviesList.jsx","services/Api.js"],"sourcesContent":["import MoviesList from 'pages/MoviesList/MoviesList';\nimport { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { getTrendMovies } from 'services/Api';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const location = useLocation();\n\n  useEffect(() => {\n    getTrendMovies()\n      .then(res => {\n        setMovies(res);\n        setError(null);\n      })\n      .catch(err => {\n        console.log(err);\n        setError(err);\n        setMovies([]);\n      });\n  }, []);\n\n  return (\n    <main>\n      <h1>Trending today</h1>\n      {error && <p>{error.message}</p>}\n\n      {movies?.length > 0 && <MoviesList movies={movies} location={location} />}\n    </main>\n  );\n};\n\nexport default Home;\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { IMAGE_URL } from 'services/Api';\n\nconst MoviesList = ({ movies, location }) => {\n  return (\n    <ul>\n      <h2>header</h2>\n      {movies.map(({ id, title, poster_path, release_date }) => (\n        <li key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <p>\n              {title}, {}\n              {release_date ? new Date(release_date).getFullYear() : '---'}\n            </p>\n            <img\n              src={IMAGE_URL + poster_path}\n              alt={title}\n              loading=\"lazy\"\n              width={250}\n            />\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string.isRequired,\n      release_date: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nexport default MoviesList;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'fccf9db5f8a12104e5720aa899b6f5b7';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\nconst TRENDING_PATH = '/trending/movie/day';\n\nexport const getTrendMovies = async () => {\n  const { data } = await axios(TRENDING_PATH, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return data.results;\n};\n\nexport const getMovId = async movieId => {\n  const { data } = await axios(`/movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  const {\n    title,\n    poster_path: posterPath,\n    release_date: releaseDate,\n    genres,\n    overview,\n    vote_average: voteAverage,\n  } = data;\n  return { title, posterPath, releaseDate, genres, overview, voteAverage };\n};\n\nexport const getCastId = async movieId => {\n  const { data } = await axios(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data.cast;\n};\n\nexport const getReviewsId = async movieId => {\n  const { data } = await axios(`/movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getMovQuery = async query => {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query,\n      page: 1,\n    },\n  });\n\n  return data.results;\n};\n"],"names":["useState","movies","setMovies","error","setError","location","useLocation","useEffect","getTrendMovies","then","res","catch","err","console","log","message","length","map","id","title","poster_path","release_date","to","state","from","Date","getFullYear","src","IMAGE_URL","alt","loading","width","axios","API_KEY","params","api_key","data","results","getMovId","movieId","posterPath","releaseDate","genres","overview","voteAverage","vote_average","getCastId","cast","getReviewsId","getMovQuery","query","page"],"sourceRoot":""}